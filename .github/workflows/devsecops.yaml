# ✅ CI (Build & Test)
# Install & lint code
#Run unit tests (if available)
# Static code analysis (eslint, prettier, npm audit)

# ✅ Security (DevSecOps)
# Dependency vulnerability scanning (npm audit)
# Static code analysis (SonarQube)

# ✅ CD (Deploy)
# Build optimized React app
# Deploy to S3
# Invalidate CloudFront cache - to remove the outdated cache
name: DevSecOps CI/CD Pipeline for releases

on:
  push:
    branches: [ "release/*" ]
  pull_request:
    branches: [ "release/*" ]

jobs:
  build:
    runs-on: [self-hosted, cmrs-github-runner-03]
    env:
      GENERATE_SOURCEMAP: false
      NODE_ENV: production  # Ensure build is optimized for production

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🚮 Remove node_modules and reinstall dependencies
        run: |
          rm -rf node_modules
          npm install

      - name: 📦 Install dependencies (via npm ci)
        run: npm ci

      - name: 🧹 Lint with ESLint
        run: npm run lint
        continue-on-error: true

      - name: 🎨 Check code formatting
        run: npm run prettier:check
        continue-on-error: true

      - name: 🔍 Security scan (npm audit)
        run: npm audit --audit-level=high || true
        continue-on-error: true

      - name: 🏗️ Build React App (Optimized)
        run: npm run build


  deploy:
    runs-on: [self-hosted, cmrs-github-runner-03]
    needs: build  # Ensure deploy happens after build finishes

    steps:
      - name: 📤 Upload to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          SOURCE_DIR: dist/
          AWS_S3_BUCKET: ${{ vars.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🚀 (Optional) Invalidate CloudFront cache
        if: success()
        uses: chetan/invalidate-cloudfront-action@v2
        with:
          distribution-id: ${{ secrets.CLOUDFRONT_DIST_ID }}
          paths: '/*'
        env:
          AWS_REGION: 'ap-southeast-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


  sonarqube_scan:
    runs-on: self-hosted
    needs: build  # This ensures that SonarQube analysis runs only after the build job is successful

    steps:
      - name: Test SonarQube Connection
        run: |
          echo "Testing connection to SonarQube server via ngrok..."
          curl -s -o /dev/null -w "%{http_code}" ${{ secrets.SONAR_HOST_URL }}
      
      - name: SonarQube Analysis
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=frontend
            -Dsonar.projectName='Frontend'
            -Dsonar.sources=src
            -Dsonar.exclusions=node_modules/**,build/**,dist/**,**/*.test.js,**/*.spec.js,**/*.test.jsx,**/*.spec.jsx,**/*.test.ts,**/*.spec.ts,**/*.test.tsx,**/*.spec.tsx
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info